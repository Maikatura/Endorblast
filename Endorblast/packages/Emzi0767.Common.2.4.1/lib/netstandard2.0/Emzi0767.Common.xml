<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emzi0767.Common</name>
    </assembly>
    <members>
        <member name="T:Emzi0767.Serialization.NumericEnumAttribute">
            <summary>
            <para>Specifies that this enum should be serialized and deserialized as its underlying numeric type.</para>
            <para>This is used to change the behaviour of enum serialization.</para>
            </summary>
        </member>
        <member name="T:Emzi0767.Serialization.StringEnumAttribute">
            <summary>
            <para>Specifies that this enum should be serialized and deserialized as its string representation.</para>
            <para>This is used to change the behaviour of enum serialization.</para>
            </summary>
        </member>
        <member name="T:Emzi0767.Serialization.IncludeNullAttribute">
            <summary>
            <para>Specifies that if the value of the field or property is null, it should be included in the serialized data.</para>
            <para>This alters the default behaviour of ignoring nulls.</para>
            </summary>
        </member>
        <member name="T:Emzi0767.Serialization.Int53Attribute">
            <summary>
            <para>Specifies that this 64-bit integer uses no more than 53 bits to represent its value.</para>
            <para>This is used to indicate that large numbers are safe for direct serialization into formats which do support 64-bit integers natively (such as JSON).</para>
            </summary>
        </member>
        <member name="T:Emzi0767.Serialization.SerializedNameAttribute">
            <summary>
            Declares name of a property in serialized data. This is used for mapping serialized data to object properties and fields.
            </summary>
        </member>
        <member name="P:Emzi0767.Serialization.SerializedNameAttribute.Name">
            <summary>
            Gets the serialized name of the field or property.
            </summary>
        </member>
        <member name="M:Emzi0767.Serialization.SerializedNameAttribute.#ctor(System.String)">
            <summary>
            Declares name of a property in serialized data. This is used for mapping serialized data to object properties and fields.
            </summary>
            <param name="name">Name of the field or property in serialized data.</param>
        </member>
        <member name="T:Emzi0767.Serialization.UnixSecondsAttribute">
            <summary>
            <para>Specifies that this <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> will be serialized as Unix timestamp seconds.</para>
            <para>This value will always be serialized as a number.</para>
            </summary>
        </member>
        <member name="T:Emzi0767.Serialization.UnixMillisecondsAttribute">
            <summary>
            <para>Specifies that this <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/> will be serialized as Unix timestamp milliseconds.</para>
            <para>This value will always be serialized as a number.</para>
            </summary>
        </member>
        <member name="T:Emzi0767.CharSpanLookupDictionary`1">
            <summary>
            Represents collection of string keys and <typeparamref name="TValue"/> values, allowing the use of <see cref="T:System.ReadOnlySpan`1"/> for dictionary operations.
            </summary>
            <typeparam name="TValue">Type of items in this dictionary.</typeparam>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.Keys">
            <summary>
            Gets the collection of all keys present in this dictionary.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.Values">
            <summary>
            Gets the collection of all values present in this dictionary.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.Count">
            <summary>
            Gets the total number of items in this dictionary.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.IsReadOnly">
            <summary>
            Gets whether this dictionary is read-only.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.IsFixedSize">
            <summary>
            Gets whether this dictionary has a fixed size.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.IsSynchronized">
            <summary>
            Gets whether this dictionary is considered thread-safe.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.SyncRoot">
            <summary>
            Gets the object which allows synchronizing access to this dictionary.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.Item(System.String)">
            <summary>
            Gets or sets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="P:Emzi0767.CharSpanLookupDictionary`1.Item(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets or sets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.#ctor">
            <summary>
            Creates a new, empty <see cref="T:Emzi0767.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.#ctor(System.Int32)">
            <summary>
            Creates a new, empty <see cref="T:Emzi0767.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and sets its initial capacity to specified value.
            </summary>
            <param name="initialCapacity">Initial capacity of the dictionary.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:Emzi0767.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:Emzi0767.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Creates a new <see cref="T:Emzi0767.CharSpanLookupDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied key-value collection.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.Add(System.String,`0)">
            <summary>
            Inserts a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.Add(System.ReadOnlySpan{System.Char},`0)">
            <summary>
            Inserts a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.TryAdd(System.String,`0)">
            <summary>
            Attempts to insert a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.TryAdd(System.ReadOnlySpan{System.Char},`0)">
            <summary>
            Attempts to insert a specific key and corresponding value into this dictionary.
            </summary>
            <param name="key">Key to insert.</param>
            <param name="value">Value corresponding to this key.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.TryGetValue(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.TryRemove(System.String,`0@)">
            <summary>
            Attempts to remove a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to remove the value for.</param>
            <param name="value">Removed value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.TryRemove(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Attempts to remove a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to remove the value for.</param>
            <param name="value">Removed value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.ContainsKey(System.String)">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.ContainsKey(System.ReadOnlySpan{System.Char})">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.Clear">
            <summary>
            Removes all items from this dictionary.
            </summary>
        </member>
        <member name="M:Emzi0767.CharSpanLookupDictionary`1.GetEnumerator">
            <summary>
            Gets an enumerator over key-value pairs in this dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Emzi0767.CharSpanLookupReadOnlyDictionary`1">
            <summary>
            Represents collection of string keys and <typeparamref name="TValue"/> values, allowing the use of <see cref="T:System.ReadOnlySpan`1"/> for dictionary operations.
            </summary>
            <typeparam name="TValue">Type of items in this dictionary.</typeparam>
        </member>
        <member name="P:Emzi0767.CharSpanLookupReadOnlyDictionary`1.Keys">
            <summary>
            Gets the collection of all keys present in this dictionary.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupReadOnlyDictionary`1.Values">
            <summary>
            Gets the collection of all values present in this dictionary.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupReadOnlyDictionary`1.Count">
            <summary>
            Gets the total number of items in this dictionary.
            </summary>
        </member>
        <member name="P:Emzi0767.CharSpanLookupReadOnlyDictionary`1.Item(System.String)">
            <summary>
            Gets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="P:Emzi0767.CharSpanLookupReadOnlyDictionary`1.Item(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a value corresponding to given key in this dictionary.
            </summary>
            <param name="key">Key to get or set the value for.</param>
            <returns>Value matching the supplied key, if applicable.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:Emzi0767.CharSpanLookupReadOnlyDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,`0})">
            <summary>
            Creates a new <see cref="T:Emzi0767.CharSpanLookupReadOnlyDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied dictionary.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Creates a new <see cref="T:Emzi0767.CharSpanLookupReadOnlyDictionary`1"/> with string keys and items of type <typeparamref name="TValue"/> and populates it with key-value pairs from supplied key-value collection.
            </summary>
            <param name="values">Dictionary containing items to populate this dictionary with.</param>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.TryGetValue(System.String,`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.TryGetValue(System.ReadOnlySpan{System.Char},`0@)">
            <summary>
            Attempts to retrieve a value corresponding to the supplied key from this dictionary.
            </summary>
            <param name="key">Key to retrieve the value for.</param>
            <param name="value">Retrieved value.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.ContainsKey(System.String)">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.ContainsKey(System.ReadOnlySpan{System.Char})">
            <summary>
            Checks whether this dictionary contains the specified key.
            </summary>
            <param name="key">Key to check for in this dictionary.</param>
            <returns>Whether the key was present in the dictionary.</returns>
        </member>
        <member name="M:Emzi0767.CharSpanLookupReadOnlyDictionary`1.GetEnumerator">
            <summary>
            Gets an enumerator over key-value pairs in this dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Emzi0767.Types.MemoryBuffer">
            <summary>
            Provides a resizable memory buffer, which can be read from and written to. It will automatically resize whenever required.
            </summary>
        </member>
        <member name="P:Emzi0767.Types.MemoryBuffer.Capacity">
            <summary>
            Gets the total capacity of this buffer. The capacity is the number of segments allocated, multiplied by size of individual segment.
            </summary>
        </member>
        <member name="P:Emzi0767.Types.MemoryBuffer.Length">
            <summary>
            Gets the amount of bytes currently written to the buffer. This number is never greather than <see cref="P:Emzi0767.Types.MemoryBuffer.Capacity"/>.
            </summary>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.#ctor(System.Int32,System.Int32,System.Buffers.MemoryPool{System.Byte},System.Boolean)">
            <summary>
            Creates a new buffer with a specified segment size, specified number of initially-allocated segments, and supplied memory pool.
            </summary>
            <param name="segmentSize">Byte size of an individual segment. Defaults to 64KiB.</param>
            <param name="initialSegmentCount">Number of segments to allocate. Defaults to 0.</param>
            <param name="memPool">Memory pool to use for renting buffers. Defaults to <see cref="P:System.Buffers.MemoryPool`1.Shared"/>.</param>
            <param name="clearOnDispose">Determines whether the underlying buffers should be cleared on exit. If dealing with sensitive data, it might be a good idea to set this option to true.</param>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Appends data from a supplied buffer to this buffer, growing it if necessary.
            </summary>
            <param name="data">Buffer containing data to write.</param>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends data from a supplied array to this buffer, growing it if necessary.
            </summary>
            <param name="data">Array containing data to write.</param>
            <param name="start">Index from which to start reading the data.</param>
            <param name="count">Number of bytes to read from the source.</param>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Write(System.ArraySegment{System.Byte})">
            <summary>
            Appends data from a supplied array slice to this buffer, growing it if necessary.
            </summary>
            <param name="data">Array slice containing data to write.</param>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Write(System.IO.Stream)">
            <summary>
            Appends data from a supplied stream to this buffer, growing it if necessary.
            </summary>
            <param name="stream">Stream to copy data from.</param>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Read(System.Span{System.Byte},System.UInt64,System.Int32@)">
            <summary>
            Reads data from this buffer to the specified destination buffer. This method will write either as many 
            bytes as there are in the destination buffer, or however many bytes are available in this buffer, 
            whichever is less.
            </summary>
            <param name="destination">Buffer to read the data from this buffer into.</param>
            <param name="source">Starting position in this buffer to read from.</param>
            <param name="bytesWritten">Number of bytes written to the destination buffer.</param>
            <returns>Whether more data is available in this buffer.</returns>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Read(System.Byte[],System.Int32,System.Int32,System.UInt64,System.Int32@)">
            <summary>
            Reads data from this buffer to specified destination array. This method will write either as many bytes 
            as specified for the destination array, or however many bytes are available in this buffer, whichever is 
            less.
            </summary>
            <param name="data">Array to read the data from this buffer into.</param>
            <param name="start">Starting position in the target array to write to.</param>
            <param name="count">Maximum number of bytes to write to target array.</param>
            <param name="source">Starting position in this buffer to read from.</param>
            <param name="bytesWritten">Number of bytes written to the destination buffer.</param>
            <returns>Whether more data is available in this buffer.</returns>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Read(System.ArraySegment{System.Byte},System.UInt64,System.Int32@)">
            <summary>
            Reads data from this buffer to specified destination array slice. This method will write either as many 
            bytes as specified in the target slice, or however many bytes are available in this buffer, whichever is 
            less.
            </summary>
            <param name="data"></param>
            <param name="source"></param>
            <param name="bytesWritten">Number of bytes written to the destination buffer.</param>
            <returns>Whether more data is available in this buffer.</returns>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.ToArray">
            <summary>
            Converts this buffer into a single continuous byte array.
            </summary>
            <returns>Converted byte array.</returns>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.CopyTo(System.IO.Stream)">
            <summary>
            Copies all the data from this buffer to a stream.
            </summary>
            <param name="destination">Stream to copy this buffer's data to.</param>
        </member>
        <member name="M:Emzi0767.Types.MemoryBuffer.Dispose">
            <summary>
            Disposes of any resources claimed by this buffer.
            </summary>
        </member>
        <member name="T:Emzi0767.Optional`1">
            <summary>
            Represents a property with an optional value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:Emzi0767.Optional`1.Default">
            <summary>
            Gets an initialized instance of <see cref="T:Emzi0767.Optional`1"/> which has no value set.
            </summary>
        </member>
        <member name="P:Emzi0767.Optional`1.HasValue">
            <summary>
            Gets whether the value of this <see cref="T:Emzi0767.Optional`1"/> is present.
            </summary>
        </member>
        <member name="P:Emzi0767.Optional`1.Value">
            <summary>
            Gets the value of this <see cref="T:Emzi0767.Optional`1"/>. Will throw if a value is not present.
            </summary>
        </member>
        <member name="M:Emzi0767.Optional`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:Emzi0767.Optional`1"/> property with specified value.
            </summary>
            <param name="value">Value of this property.</param>
        </member>
        <member name="M:Emzi0767.Optional`1.GetHashCode">
            <summary>
            Returns hash code of the underlying value.
            </summary>
            <returns>Hash code of the underlying value.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.Equals(System.Object)">
            <summary>
            Checks whether the value of this property is equal to another value.
            </summary>
            <param name="obj">Object to compare against.</param>
            <returns>Whether the supplied object is equal to the value of this property.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.Equals(Emzi0767.Optional{`0})">
            <summary>
            Checks whether this property is equal to another property.
            </summary>
            <param name="other">Property to compare against.</param>
            <returns>Whether the supplied property is equal to this property.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.Equals(`0)">
            <summary>
            Checks whether this proerty's value is equal to another value.
            </summary>
            <param name="other">Value to compare this property's value against.</param>
            <returns>Whether the supplied value is equal to the value of this property.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.ToString">
            <summary>
            Returns a string representation of the underlying value, if present.
            </summary>
            <returns>String representation of the underlying value, if present.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.op_Implicit(`0)~Emzi0767.Optional{`0}">
            <summary>
            Converts a specified value into an optional property of the value's type. The resulting property will have
            its value set to the supplied one.
            </summary>
            <param name="value">Value to convert into an optional property.</param>
        </member>
        <member name="M:Emzi0767.Optional`1.op_Equality(Emzi0767.Optional{`0},Emzi0767.Optional{`0})">
            <summary>
            Compares two properties and returns whether they are equal.
            </summary>
            <param name="left">Property to compare against.</param>
            <param name="right">Property to compare.</param>
            <returns>Whether the two properties are equal.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.op_Inequality(Emzi0767.Optional{`0},Emzi0767.Optional{`0})">
            <summary>
            Compares two properties and returns whether they are not equal.
            </summary>
            <param name="left">Property to compare against.</param>
            <param name="right">Property to compare.</param>
            <returns>Whether the two properties are not equal.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.op_Equality(Emzi0767.Optional{`0},`0)">
            <summary>
            Compares a property's value against another value, and returns whether they are equal.
            </summary>
            <param name="left">Property to compare against.</param>
            <param name="right">Value to compare.</param>
            <returns>Whether the property's value is equal to the specified value.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.op_Inequality(Emzi0767.Optional{`0},`0)">
            <summary>
            Compares a property's value against another value, and returns whether they are not equal.
            </summary>
            <param name="left">Property to compare against.</param>
            <param name="right">Value to compare.</param>
            <returns>Whether this property's value is not equal to the specified value.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.op_True(Emzi0767.Optional{`0})">
            <summary>
            Checks whether specified property has a value.
            </summary>
            <param name="opt">Property to check.</param>
            <returns>Whether the property has a value.</returns>
        </member>
        <member name="M:Emzi0767.Optional`1.op_False(Emzi0767.Optional{`0})">
            <summary>
            Checks whether specified property has no value.
            </summary>
            <param name="opt">Property to check.</param>
            <returns>Whether the property has no value.</returns>
        </member>
        <member name="T:Emzi0767.Optional">
            <summary>
            Utilities for creation of optional properties.
            </summary>
        </member>
        <member name="M:Emzi0767.Optional.FromValue``1(``0)">
            <summary>
            Creates a new <see cref="T:Emzi0767.Optional`1"/> from a value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to create an optional property for.</typeparam>
            <param name="value">Value to set the property to.</param>
            <returns>Created optional property, which has a specified value set.</returns>
        </member>
        <member name="M:Emzi0767.Optional.FromDefaultValue``1">
            <summary>
            Creates a new <see cref="T:Emzi0767.Optional`1"/> from a default value for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to create an optional property for.</typeparam>
            <returns>Created optional property, which has a default value for <typeparamref name="T"/> set.</returns>
        </member>
        <member name="M:Emzi0767.Optional.FromNoValue``1">
            <summary>
            Creates a new <see cref="T:Emzi0767.Optional`1"/> which has no value.
            </summary>
            <typeparam name="T">Type of the value to create an optional property for.</typeparam>
            <returns>Created optional property, which has no value set.</returns>
        </member>
        <member name="T:Emzi0767.SecureRandom">
            <summary>
            Provides a cryptographically-secure pseudorandom number generator (CSPRNG) implementation compatible with <see cref="T:System.Random"/>.
            </summary>
        </member>
        <member name="M:Emzi0767.SecureRandom.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Emzi0767.SecureRandom"/>.
            </summary>
        </member>
        <member name="M:Emzi0767.SecureRandom.Finalize">
            <summary>
            Finalizes this <see cref="T:Emzi0767.SecureRandom"/> instance by disposing it.
            </summary>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetBytes(System.Byte[])">
            <summary>
            Fills a supplied buffer with random bytes.
            </summary>
            <param name="buffer">Buffer to fill with random bytes.</param>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetNonZeroBytes(System.Byte[])">
            <summary>
            Fills a supplied buffer with random nonzero bytes.
            </summary>
            <param name="buffer">Buffer to fill with random nonzero bytes.</param>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetBytes(System.Span{System.Byte})">
            <summary>
            Fills a supplied memory region with random bytes.
            </summary>
            <param name="buffer">Memmory region to fill with random bytes.</param>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetNonZeroBytes(System.Span{System.Byte})">
            <summary>
            Fills a supplied memory region with random nonzero bytes.
            </summary>
            <param name="buffer">Memmory region to fill with random nonzero bytes.</param>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetInt8(System.SByte,System.SByte)">
            <summary>
            Generates a signed 8-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.SByte.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetUInt8(System.Byte,System.Byte)">
            <summary>
            Generates a unsigned 8-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Byte.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetInt16(System.Int16,System.Int16)">
            <summary>
            Generates a signed 16-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Int16.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetUInt16(System.UInt16,System.UInt16)">
            <summary>
            Generates a unsigned 16-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.UInt16.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetInt32(System.Int32,System.Int32)">
            <summary>
            Generates a signed 32-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Int32.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetUInt32(System.UInt32,System.UInt32)">
            <summary>
            Generates a unsigned 32-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.UInt32.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetInt64(System.Int64,System.Int64)">
            <summary>
            Generates a signed 64-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.Int64.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetUInt64(System.UInt64,System.UInt64)">
            <summary>
            Generates a unsigned 64-bit integer within specified range.
            </summary>
            <param name="min">Minimum value to generate. Defaults to 0.</param>
            <param name="max">Maximum value to generate. Defaults to <see cref="F:System.UInt64.MaxValue"/>.</param>
            <returns>Generated random value.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetSingle">
            <summary>
            Generates a 32-bit floating-point number between 0.0 and 1.0.
            </summary>
            <returns>Generated 32-bit floating-point number.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.GetDouble">
            <summary>
            Generates a 64-bit floating-point number between 0.0 and 1.0.
            </summary>
            <returns>Generated 64-bit floating-point number.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.Next">
            <summary>
            Generates a 32-bit integer between 0 and <see cref="F:System.Int32.MaxValue"/>. Upper end exclusive.
            </summary>
            <returns>Generated 32-bit integer.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.Next(System.Int32)">
            <summary>
            Generates a 32-bit integer between 0 and <paramref name="maxValue"/>. Upper end exclusive.
            </summary>
            <param name="maxValue">Maximum value of the generated integer.</param>
            <returns>Generated 32-bit integer.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.Next(System.Int32,System.Int32)">
            <summary>
            Generates a 32-bit integer between <paramref name="minValue"/> and <paramref name="maxValue"/>. Upper end exclusive.
            </summary>
            <param name="minValue">Minimum value of the generate integer.</param>
            <param name="maxValue">Maximum value of the generated integer.</param>
            <returns>Generated 32-bit integer.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.NextDouble">
            <summary>
            Generates a 64-bit floating-point number between 0.0 and 1.0. Upper end exclusive.
            </summary>
            <returns>Generated 64-bit floating-point number.</returns>
        </member>
        <member name="M:Emzi0767.SecureRandom.NextBytes(System.Byte[])">
            <summary>
            Fills specified buffer with random bytes.
            </summary>
            <param name="buffer">Buffer to fill with bytes.</param>
        </member>
        <member name="M:Emzi0767.SecureRandom.NextBytes(System.Span{System.Byte})">
            <summary>
            Fills specified memory region with random bytes.
            </summary>
            <param name="buffer">Memory region to fill with bytes.</param>
        </member>
        <member name="M:Emzi0767.SecureRandom.Dispose">
            <summary>
            Disposes this <see cref="T:Emzi0767.SecureRandom"/> instance and its resources.
            </summary>
        </member>
        <member name="M:Emzi0767.SecureRandom.Sample">
            <summary>
            Generates a random 64-bit floating-point number between 0.0 and 1.0. Upper end exclusive.
            </summary>
            <returns>Generated 64-bit floating-point number.</returns>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEvent">
            <summary>
            ABC for <see cref="T:Emzi0767.Utilities.AsyncEvent`2"/>, allowing for using instances thereof without knowing the underlying instance's type parameters.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncEvent.Name">
            <summary>
            Gets the name of this event.
            </summary>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEvent`2">
            <summary>
            Implementation of asynchronous event. The handlers of such events are executed asynchronously, but sequentially.
            </summary>
            <typeparam name="TSender">Type of the object that dispatches this event.</typeparam>
            <typeparam name="TArgs">Type of event argument object passed to this event's handlers.</typeparam>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncEvent`2.MaximumExecutionTime">
            <summary>
            Gets the maximum alloted execution time for all handlers. Any event which causes the handler to time out 
            will raise a non-fatal <see cref="T:Emzi0767.Utilities.AsyncEventTimeoutException`2"/>.
            </summary>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncEvent`2.#ctor(System.String,System.TimeSpan,Emzi0767.Utilities.AsyncEventExceptionHandler{`0,`1})">
            <summary>
            Creates a new asynchronous event with specified name and exception handler.
            </summary>
            <param name="name">Name of this event.</param>
            <param name="maxExecutionTime">Maximum handler execution time. A value of <see cref="F:System.TimeSpan.Zero"/> means infinite.</param>
            <param name="exceptionHandler">Delegate which handles exceptions caused by this event.</param>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncEvent`2.Register(Emzi0767.Utilities.AsyncEventHandler{`0,`1})">
            <summary>
            Registers a new handler for this event.
            </summary>
            <param name="handler">Handler to register for this event.</param>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncEvent`2.Unregister(Emzi0767.Utilities.AsyncEventHandler{`0,`1})">
            <summary>
            Unregisters an existing handler from this event.
            </summary>
            <param name="handler">Handler to unregister from the event.</param>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncEvent`2.UnregisterAll">
            <summary>
            Unregisters all existing handlers from this event.
            </summary>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncEvent`2.InvokeAsync(`0,`1,Emzi0767.Utilities.AsyncEventExceptionMode)">
            <summary>
            <para>Raises this event by invoking all of its registered handlers, in order of registration.</para>
            <para>All exceptions throw during invocation will be handled by the event's registered exception handler.</para>
            </summary>
            <param name="sender">Object which raised this event.</param>
            <param name="e">Arguments for this event.</param>
            <param name="exceptionMode">Defines what to do with exceptions caught from handlers.</param>
            <returns></returns>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEventArgs">
            <summary>
            Contains arguments passed to an asynchronous event.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncEventArgs.Handled">
            <summary>
            <para>Gets or sets whether this event was handled.</para>
            <para>Setting this to true will prevent other handlers from running.</para>
            </summary>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEventExceptionHandler`2">
            <summary>
            Handles any exception raised by an <see cref="T:Emzi0767.Utilities.AsyncEvent`2"/> or its handlers.
            </summary>
            <typeparam name="TSender">Type of the object that dispatches this event.</typeparam>
            <typeparam name="TArgs">Type of the object which holds arguments for this event.</typeparam>
            <param name="asyncEvent">Asynchronous event which threw the exception.</param>
            <param name="exception">Exception that was thrown</param>
            <param name="handler">Handler which threw the exception.</param>
            <param name="sender">Object which dispatched the event.</param>
            <param name="eventArgs">Arguments with which the event was dispatched.</param>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEventExceptionMode">
            <summary>
            Defines the behaviour for throwing exceptions from <see cref="M:Emzi0767.Utilities.AsyncEvent`2.InvokeAsync(`0,`1,Emzi0767.Utilities.AsyncEventExceptionMode)"/>.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.IgnoreAll">
            <summary>
            Defines that no exceptions should be thrown. Only exception handlers will be used.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.ThrowFatal">
            <summary>
            Defines that only fatal (i.e. non-<see cref="T:Emzi0767.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be thrown.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.ThrowNonFatal">
            <summary>
            Defines that only non-fatal (i.e. <see cref="T:Emzi0767.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be thrown.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.ThrowAll">
            <summary>
            Defines that all exceptions should be thrown. This is equivalent to combining <see cref="F:Emzi0767.Utilities.AsyncEventExceptionMode.ThrowFatal"/> and 
            <see cref="F:Emzi0767.Utilities.AsyncEventExceptionMode.ThrowNonFatal"/> flags.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.HandleFatal">
            <summary>
            Defines that only fatal (i.e. non-<see cref="T:Emzi0767.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be handled by the specified exception handler.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.HandleNonFatal">
            <summary>
            Defines that only non-fatal (i.e. <see cref="T:Emzi0767.Utilities.AsyncEventTimeoutException`2"/>) exceptions 
            should be handled by the specified exception handler.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.HandleAll">
            <summary>
            Defines that all exceptions should be handled by the specified exception handler. This is equivalent to 
            combining <see cref="F:Emzi0767.Utilities.AsyncEventExceptionMode.HandleFatal"/> and <see cref="F:Emzi0767.Utilities.AsyncEventExceptionMode.HandleNonFatal"/> flags.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.ThrowAllHandleAll">
            <summary>
            Defines that all exceptions should be thrown and handled by the specified exception handler. This is 
            equivalent to combinind <see cref="F:Emzi0767.Utilities.AsyncEventExceptionMode.HandleAll"/> and <see cref="F:Emzi0767.Utilities.AsyncEventExceptionMode.ThrowAll"/> flags.
            </summary>
        </member>
        <member name="F:Emzi0767.Utilities.AsyncEventExceptionMode.Default">
            <summary>
            Default mode, equivalent to <see cref="F:Emzi0767.Utilities.AsyncEventExceptionMode.HandleAll"/>.
            </summary>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEventHandler`2">
            <summary>
            Handles an asynchronous event of type <see cref="T:Emzi0767.Utilities.AsyncEvent`2"/>. The handler will take an instance of <typeparamref name="TArgs"/> as its arguments.
            </summary>
            <typeparam name="TSender">Type of the object that dispatches this event.</typeparam>
            <typeparam name="TArgs">Type of the object which holds arguments for this event.</typeparam>
            <param name="sender">Object which raised this event.</param>
            <param name="e">Arguments for this event.</param>
            <returns></returns>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEventTimeoutException">
            <summary>
            ABC for <see cref="T:Emzi0767.Utilities.AsyncEventHandler`2"/>, allowing for using instances thereof without knowing the underlying instance's type parameters.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncEventTimeoutException.Event">
            <summary>
            Gets the event the invocation of which caused the timeout.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncEventTimeoutException.Handler">
            <summary>
            Gets the handler which caused the timeout.
            </summary>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncEventTimeoutException`2">
            <summary>
            <para>Thrown whenever execution of an <see cref="T:Emzi0767.Utilities.AsyncEventHandler`2"/> exceeds maximum time allowed.</para>
            <para>This is a non-fatal exception, used primarily to inform users that their code is taking too long to execute.</para>
            </summary>
            <typeparam name="TSender">Type of sender that dispatched this asynchronous event.</typeparam>
            <typeparam name="TArgs">Type of event arguments for the asynchronous event.</typeparam>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncEventTimeoutException`2.Event">
            <summary>
            Gets the event the invocation of which caused the timeout.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncEventTimeoutException`2.Handler">
            <summary>
            Gets the handler which caused the timeout.
            </summary>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncEventTimeoutException`2.#ctor(Emzi0767.Utilities.AsyncEvent{`0,`1},Emzi0767.Utilities.AsyncEventHandler{`0,`1})">
            <summary>
            Creates a new timeout exception for specified event and handler.
            </summary>
            <param name="asyncEvent">Event the execution of which timed out.</param>
            <param name="eventHandler">Handler which timed out.</param>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncExecutor">
            <summary>
            Provides a simplified way of executing asynchronous code synchronously.
            </summary>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncExecutor.#ctor">
            <summary>
            Creates a new instance of asynchronous executor.
            </summary>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncExecutor.Execute(System.Threading.Tasks.Task)">
            <summary>
            Executes a specified task in an asynchronous manner, waiting for its completion.
            </summary>
            <param name="task">Task to execute.</param>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncExecutor.Execute``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Executes a specified task in an asynchronous manner, waiting for its completion, and returning the result.
            </summary>
            <typeparam name="T">Type of the Task's return value.</typeparam>
            <param name="task">Task to execute.</param>
            <returns>Task's result.</returns>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncExecutor.StateRef`1.Lock">
            <summary>
            Gets the lock used to wait for task's completion.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncExecutor.StateRef`1.Exception">
            <summary>
            Gets the exception that occured during task's execution, if any.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncExecutor.StateRef`1.Result">
            <summary>
            Gets the result returned by the task.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncExecutor.StateRef`1.HasResult">
            <summary>
            Gets whether the task returned a result.
            </summary>
        </member>
        <member name="T:Emzi0767.Utilities.AsyncManualResetEvent">
            <summary>
            Represents a thread synchronization event that, when signaled, must be reset manually. Unlike <see cref="T:System.Threading.ManualResetEventSlim"/>, this event is asynchronous.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.AsyncManualResetEvent.IsSet">
            <summary>
            Gets whether this event has been signaled.
            </summary>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates a new asynchronous synchronization event with initial state.
            </summary>
            <param name="initialState">Initial state of this event.</param>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncManualResetEvent.SetAsync">
            <summary>
            Asynchronously signal this event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncManualResetEvent.WaitAsync">
            <summary>
            Asynchronously wait for this event to be signaled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emzi0767.Utilities.AsyncManualResetEvent.Reset">
            <summary>
            Reset this event's signal state to unsignaled.
            </summary>
        </member>
        <member name="T:Emzi0767.Utilities.ReflectionUtilities">
            <summary>
            Contains various utilities for use with .NET's reflection.
            </summary>
        </member>
        <member name="M:Emzi0767.Utilities.ReflectionUtilities.CreateEmpty(System.Type)">
            <summary>
            <para>Creates an empty, uninitialized instance of specified type.</para>
            <para>This method will not call the constructor for the specified type. As such, the object might not be properly initialized.</para>
            </summary>
            <remarks>
            This method is intended for reflection use only.
            </remarks>
            <param name="t">Type of the object to instantiate.</param>
            <returns>Empty, uninitialized object of specified type.</returns>
        </member>
        <member name="M:Emzi0767.Utilities.ReflectionUtilities.CreateEmpty``1">
            <summary>
            <para>Creates an empty, uninitialized instance of type <typeparamref name="T"/>.</para>
            <para>This method will not call the constructor for type <typeparamref name="T"/>. As such, the object might not be proerly initialized.</para>
            </summary>
            <remarks>
            This method is intended for reflection use only.
            </remarks>
            <typeparam name="T">Type of the object to instantiate.</typeparam>
            <returns>Empty, uninitalized object of specified type.</returns>
        </member>
        <member name="M:Emzi0767.Utilities.ReflectionUtilities.ToDictionary``1(``0)">
            <summary>
            Converts a given object into a dictionary of property name to property value mappings.
            </summary>
            <typeparam name="T">Type of object to convert.</typeparam>
            <param name="obj">Object to convert.</param>
            <returns>Converted dictionary.</returns>
        </member>
        <member name="T:Emzi0767.Utilities.RuntimeInformation">
            <summary>
            Gets information about current runtime.
            </summary>
        </member>
        <member name="P:Emzi0767.Utilities.RuntimeInformation.Version">
            <summary>
            Gets the current runtime's version.
            </summary>
        </member>
        <member name="T:Emzi0767.Extensions">
            <summary>
            Assortment of various extension and utility methods, designed to make working with various types a little easier.
            </summary>
        </member>
        <member name="M:Emzi0767.Extensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            <para>Deconstructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> key-value pair item (<see cref="T:System.Collections.Generic.KeyValuePair`2"/>) into 2 separate variables.</para>
            <para>This allows for enumerating over dictionaries in foreach blocks by using a (k, v) tuple as the enumerator variable, instead of having to use a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> directly.</para>
            </summary>
            <typeparam name="TKey">Type of dictionary item key.</typeparam>
            <typeparam name="TValue">Type of dictionary item value.</typeparam>
            <param name="kvp">Key-value pair to deconstruct.</param>
            <param name="key">Deconstructed key.</param>
            <param name="value">Deconstructed value.</param>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.SByte)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.Byte)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated nuembr length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.Int16)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.UInt16)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated nuembr length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.Int32)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.UInt32)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated nuembr length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.Int64)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated number length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateLength(System.UInt64)">
            <summary>
            Calculates the length of string representation of given number in base 10 (including sign, if present).
            </summary>
            <param name="num">Number to calculate the length of.</param>
            <returns>Calculated nuembr length.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.SByte,System.SByte,System.SByte,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsInRange(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Tests wheter given value is in supplied range, optionally allowing it to be an exclusive check.
            </summary>
            <param name="num">Number to test.</param>
            <param name="min">Lower bound of the range.</param>
            <param name="max">Upper bound of the range.</param>
            <param name="inclusive">Whether the check is to be inclusive.</param>
            <returns>Whether the value is in range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsBasicAlphanumeric(System.Char)">
            <summary>
            Returns whether supplied character is in any of the following ranges: a-z, A-Z, 0-9.
            </summary>
            <param name="c">Character to test.</param>
            <returns>Whether the character is in basic alphanumeric character range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsBasicDigit(System.Char)">
            <summary>
            Returns whether supplied character is in the 0-9 range.
            </summary>
            <param name="c">Character to test.</param>
            <returns>Whether the character is in basic numeric digit character range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.IsBasicLetter(System.Char)">
            <summary>
            Returns whether supplied character is in the a-z or A-Z range.
            </summary>
            <param name="c">Character to test.</param>
            <returns>Whether the character is in basic letter character range.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.EndsWithCharacter(System.String,System.Char)">
            <summary>
            Tests whether given string ends with given character.
            </summary>
            <param name="s">String to test.</param>
            <param name="c">Character to test for.</param>
            <returns>Whether the supplied string ends with supplied character.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.StartsWithCharacter(System.String,System.Char)">
            <summary>
            Tests whether given string starts with given character.
            </summary>
            <param name="s">String to test.</param>
            <param name="c">Character to test for.</param>
            <returns>Whether the supplied string starts with supplied character.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.ReadOnlySpan{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.Span{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.ReadOnlyMemory{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.Memory{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.ArraySegment{System.Char})">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.Char[])">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.Char[],System.Int32,System.Int32)">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <param name="start">Offset in the array to start calculating from.</param>
            <param name="count">Number of characters to compute the hash from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.String)">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
        <member name="M:Emzi0767.Extensions.CalculateKnuthHash(System.String,System.Int32,System.Int32)">
            <summary>
            Computes a 64-bit Knuth hash from supplied characters.
            </summary>
            <param name="chars">Characters to compute the hash value from.</param>
            <param name="start">Offset in the array to start calculating from.</param>
            <param name="count">Number of characters to compute the hash from.</param>
            <returns>Computer 64-bit Knuth hash.</returns>
        </member>
    </members>
</doc>
